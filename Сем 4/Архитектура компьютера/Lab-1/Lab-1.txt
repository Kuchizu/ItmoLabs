Всем привет сегодня мы поговорим про GIL как оно реализовано в Python, его влияние на многопоточность и способы обхода GIL

Slide 2:
GIL - Это механизм который ограничивает доступ к участку памяти позволяя только одному потоку выполнять байткод в один момент времени

...

Slide 3:
Как это работает в Python - Вот у нас есть простой класс с функцией run, Python создаст структуру данных PyThreadState в котором указаны текущий stack frame в коде...

Интерпретатор хранит в глобальной переменной PyThreadState_Current указатель на текущий активный поток, выполняемые действия зависят от этой переменной

Slide 4:
Получается, в любой момент может выполняться только один поток Python. GIL — контролирует выполнение потоков. GIL гарантирует каждому потоку эксклюзивный доступ к переменным интерпретатора (и соответствующие вызовы C-расширений работают правильно).

Принцип работы прост. Потоки удерживают GIL, пока выполняются. Однако они освобождают его при блокировании для операций ввода-вывода. Каждый раз, когда поток вынужден ждать, другие, готовые к выполнению, потоки используют свой шанс запуститься.

При работе с CPU-зависимыми потоками, которые никогда не производят операции ввода-вывода, интерпретатор периодически проводит проверку («the periodic check»).

По умолчанию это происходит каждые 100 «тиков», но этот параметр можно изменить с помощью sys.setcheckinterval(). Интервал проверки — глобальный счетчик, абсолютно независимый от порядка переключения потоков.

Slide 5:
Когда поступает какой-то сигнал интерпретатор будет запускать check после каждого тика пока не запустится основной поток и только тогда выполнит запрос ...


Slide 6, 7:
Давайте рассмотрим способы оптимизации и конечно самым банальным является использование многопроцессности вместо многопоточности в этом случае мы можем разделить нашу задачу на несколько процессов с собственным GIL, кроме этого библиотека multiprocessing даст нам много возможностей для оптимизации кода, например, можно использовать Lock для гарантии того, что только один процесс может выполнять определенный участок кода одновременно

Семафоры похожи на блокировки, но позволяют ограничить доступ к ресурсу не одним, а несколькими процессами одновременно

Также можем использовать Event для выполнения события только тогда когда основновной тред отправит соответствующий сигнал, мы также можем использовать очереди если наша задача заключается в том чтобы выполнять какие-то действие последовательно

Slide 8:
В отличие от многопоточного исполнения, asyncio использует единственный поток и event loop для управления асинхронными операциями, что позволяет обходить ограничения, связанные с GIL.

Slide 9:
Другой способ обхода GIL это использование C, C++ модулей. Мы можем написать свою процессо-требовательный модуль и интегрировать в наш основной питон код в этом случае...
