{
	"nodes":[
		{"id":"2ee67b0a9604215b","type":"group","x":-1058,"y":-800,"width":1618,"height":2224,"label":"Process"},
		{"id":"1ce07b76d849dfd2","type":"group","x":-931,"y":465,"width":1406,"height":872,"label":"Threads"},
		{"id":"3389d6606f53f248","type":"group","x":-2080,"y":-800,"width":852,"height":1111,"label":"Process Table (PCB)"},
		{"id":"76dac33ab6e86e2d","type":"group","x":-865,"y":607,"width":1299,"height":677,"label":"Main Thread or any other threads"},
		{"id":"f0bcf8d64980b68a","type":"group","x":-2080,"y":465,"width":852,"height":960,"label":"Thread Table (TCB)"},
		{"id":"c2829747d8c35012","type":"group","x":-205,"y":-626,"width":681,"height":937,"label":"Context"},
		{"id":"981b11a8633a252c","type":"group","x":-931,"y":-626,"width":618,"height":937,"label":"Address Space"},
		{"id":"92304b6ca95edd4e","type":"text","text":"# PID (Process ID)","x":-2038,"y":-757,"width":724,"height":132},
		{"id":"8a12ef660b9b6148","type":"text","text":"# Process status (wait, run, ready, ...)","x":-2038,"y":-583,"width":724,"height":132},
		{"id":"b324d0fd85d7ac6a","type":"text","text":"# Pointer to addres spaces","x":-2038,"y":-387,"width":724,"height":132},
		{"id":"e45e93513f890de2","type":"text","text":"# Pointer to context","x":-2038,"y":-189,"width":724,"height":132},
		{"id":"01ff2be671554bdf","type":"text","text":"# Links to resources","x":-2038,"y":-16,"width":724,"height":132},
		{"id":"3d400e719ee569aa","type":"text","text":"# Data - inited static vars","x":-887,"y":-16,"width":533,"height":132},
		{"id":"8f50ff2fc752ec15","type":"text","text":"# Notes:\n##### 1. Потоки ==разделяют== из адресного пространства родительского процесса:\n\t1. Кучу\n\t2. Глобальные переменные\n\t3. Код\n\t4. Открытые файлы и дескрипторы\n##### 2. Потоки ==не разделяют:==\n\t1. Собственный стек\n\t2. Контекст выполнения\n##### 3. Некоторые данные о процессе хранятся ==и в PCB и в контексте процесса:==\n\t1. PID:\n\t\t1. В контексте - Чтобы сам процесс мог узнать свой PID, например для getpid\n\t\t2. В PCB - Для управления процессами в ОС\n\t2. Process State:\n\t\t1. В контексте - Может временно фиксироваться для восстановления выполнения или хз\n\t\t2. В PCB - Как основной источник информации о текущем состоянии процесса\n\t3. Process Registers:\n\t\t1. В контексте - Это текущие регистры для процесса для выполнения процесса\n\t\t2. В PCB - Чтобы восстановить в контекст при Context Swap\n\t4. Address Space Pointers:\n\t\t1. В контексте - Данные нужны для процессора при выполнении (например, активный стек или куча). Крч процесс использует это для доступа к своей памяти\n\t\t2. В PCB - Это для ОС чтобы управлять процессом bruh\n##### 4. Некоторые данные о процессе хранятся ==только в PCB или только в контексте процесса:==\n\t1. Только в PCB:\n\t\t1. Таблица открытых файлов\n\t\t2. Ресурсы (память, устройства)\n\t\t3. Права доступа\n\t\t4. Родительские и дочерние процессы\n\t\t5. Приоритет процесса\n\t\t6. Ссылки на потоки\n\t\t7. Счётчики времени\n\t2. Только в контексте:\n\t\t1. Регистры процессора\n\t\t2. Текущий локальный стек\n\t\t3. Локальная сигнальная маска\n\t\t4. Текущее состояние выполнения\n##### 5. Некоторые данные о потоке хранятся ==и в TCB и в контексте потока:==\n\t1. Thread State:\n\t\t1. В контексте:\n\t\t\t- Хранится текущее состояние для восстановления выполнения\n\t\t2. В TCB:\n\t\t\t- Позволяет ОС управлять потоком в любой момент времени\n\t2. Process Registers\n\t\t1. В контексте:\n\t\t\t- Используются во время выполнения потока\n\t\t2. В TCB:\n\t\t\t- Регистры копируются в TCB при переключении и восстанавливаются из него при возврате потока на выполнение\n\t3. Stack Pointers:\n\t\t1. В контексте:\n\t\t\t- Используются во время выполнения потока для работы с локальными переменными, параметрами функций и адресами возврата\n\t\t2. В TCB:\n\t\t\t- Хранится текущая позиция в стеке потока, чтобы ОС могла сохранить или восстановить стек\n##### 6. Некоторые данные о потоке хранятся ==только в TCB или только в контексте потока:==\n\t1. Только в TCB:\n\t\t1. TID\n\t\t2. Состояние потока\n\t\t3. Приоритет потока\n\t\t4. Связь с процессом PCB\n\t\t5. Локальные ресурсы (мьютексы, семафоры) типа .acquire(), .release() и тд жи есть\n\t2. Только в контексте:\n\t\t1. Регистры процессора\n\t\t2. Текущий стек потока\n\t\t3. Локальная сигнальная маска\n##### 7. Потоки ==лёгкие==, причины:\n\t1.  Общее адресное пространство\n\t2.  Разделяют ресурсы и память\n\t3. Быстрое переключение контекста\n\t4. Меньшие накладные расходы на создание","x":640,"y":-804,"width":2200,"height":2229},
		{"id":"d2d2090ad134732d","type":"text","text":"# Processor registers (PC, SP, ...)","x":-164,"y":-387,"width":596,"height":132},
		{"id":"087b6ec0defcd5d0","type":"text","text":"# Process state","x":-164,"y":-189,"width":596,"height":132},
		{"id":"5c3d2dc8aaaec62e","type":"text","text":"# Memory context","x":-164,"y":-16,"width":596,"height":132},
		{"id":"179829a9c020ec91","type":"text","text":"# PID - Process ID","x":-164,"y":-583,"width":596,"height":132},
		{"id":"c00398bac1b9b908","type":"text","text":"# Local signal masks","x":-164,"y":160,"width":596,"height":132},
		{"id":"91a0f0784dfa52f5","type":"text","text":"# Binary process image","x":-887,"y":160,"width":533,"height":132},
		{"id":"9dd85bba8e2d7cb4","type":"text","text":"# Kernel Space","x":-887,"y":-583,"width":533,"height":132},
		{"id":"da0c96bdaa84215d","type":"text","text":"# Stack","x":-887,"y":-387,"width":533,"height":132},
		{"id":"aa51bd7b5d36603e","type":"text","text":"# Heap","x":-887,"y":-189,"width":533,"height":132},
		{"id":"354f8737efab78b7","type":"text","text":"# Links to threads","x":-2038,"y":160,"width":724,"height":132},
		{"id":"7085989e42956cb0","type":"text","text":"# Stack - Unique to every thread","x":-824,"y":694,"width":1156,"height":132},
		{"id":"43ea35c3fef41c77","type":"text","text":"# Context (PC, Sp, ...)","x":-824,"y":879,"width":1156,"height":132},
		{"id":"8c2f947a331ee20a","type":"text","text":"# Thread-local storage (TLS) - Some vars or etc.","x":-824,"y":1063,"width":1156,"height":132},
		{"id":"1f813cdc61d2f9f7","type":"text","text":"# TID (Thread ID)","x":-2038,"y":507,"width":724,"height":132},
		{"id":"08441c55dd3d9acb","type":"text","text":"# Registers (PC, SP, ...)","x":-2038,"y":694,"width":724,"height":132},
		{"id":"c2212ee33e94e161","type":"text","text":"# Thread priority","x":-2038,"y":879,"width":724,"height":132},
		{"id":"b60abbcbca64d971","type":"text","text":"# Links to process memory","x":-2038,"y":1063,"width":724,"height":132},
		{"id":"78be894887ccec6e","type":"text","text":"# Thread state","x":-2038,"y":1250,"width":724,"height":132}
	],
	"edges":[
		{"id":"fbcf1fa0009bade4","fromNode":"aa51bd7b5d36603e","fromSide":"left","toNode":"da0c96bdaa84215d","toSide":"left"},
		{"id":"614fc00316b70108","fromNode":"da0c96bdaa84215d","fromSide":"right","toNode":"aa51bd7b5d36603e","toSide":"right"},
		{"id":"5d052f07c15ff5e9","fromNode":"e45e93513f890de2","fromSide":"right","toNode":"c2829747d8c35012","toSide":"top"},
		{"id":"290c4698e3a843c3","fromNode":"b324d0fd85d7ac6a","fromSide":"right","toNode":"981b11a8633a252c","toSide":"top"},
		{"id":"ddbd9d59c96bb158","fromNode":"1ce07b76d849dfd2","fromSide":"top","toNode":"981b11a8633a252c","toSide":"bottom","toEnd":"none"},
		{"id":"05fdbb32f9c81fe7","fromNode":"354f8737efab78b7","fromSide":"right","toNode":"1ce07b76d849dfd2","toSide":"left"},
		{"id":"e13c7f80e97deb5c","fromNode":"f0bcf8d64980b68a","fromSide":"right","toNode":"1ce07b76d849dfd2","toSide":"top"}
	]
}